"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _mustache = _interopRequireDefault(require("mustache"));
var detectDiff = _interopRequireWildcard(require("x-img-diff-js"));
var _fs = _interopRequireDefault(require("fs"));
var _makeDir = _interopRequireDefault(require("make-dir"));
var _path = _interopRequireDefault(require("path"));
var xmlBuilder = _interopRequireWildcard(require("xmlbuilder2"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
// $FlowIgnore
// $FlowIgnore
// $FlowIgnore
var loadFaviconAsDataURL = type => {
  var fname = _path.default.resolve(__dirname, `../report/assets/favicon_${type}.png`);
  var buffer = _fs.default.readFileSync(fname);
  return 'data:image/png;base64,' + buffer.toString('base64');
};
var encodeFilePath = filePath => {
  return filePath.split(_path.default.sep).map(p => encodeURIComponent(p)).join(_path.default.sep);
};
var createJSONReport = params => {
  return {
    failedItems: params.failedItems,
    newItems: params.newItems,
    deletedItems: params.deletedItems,
    passedItems: params.passedItems,
    expectedItems: params.expectedItems,
    actualItems: params.actualItems,
    diffItems: params.diffItems,
    actualDir: `${params.urlPrefix}${_path.default.relative(_path.default.dirname(params.json), params.actualDir)}`,
    expectedDir: `${params.urlPrefix}${_path.default.relative(_path.default.dirname(params.json), params.expectedDir)}`,
    diffDir: `${params.urlPrefix}${_path.default.relative(_path.default.dirname(params.json), params.diffDir)}`
  };
};
var createHTMLReport = params => {
  var file = _path.default.join(__dirname, '../template/template.html');
  var js = _fs.default.readFileSync(_path.default.join(__dirname, '../report/ui/dist/report.js'));
  var css = _fs.default.readFileSync(_path.default.join(__dirname, '../report/ui/dist/style.css'));
  var template = _fs.default.readFileSync(file);
  var json = {
    type: params.failedItems.length === 0 ? 'success' : 'danger',
    hasNew: params.newItems.length > 0,
    newItems: params.newItems.map(item => ({
      raw: item,
      encoded: encodeFilePath(item)
    })),
    hasDeleted: params.deletedItems.length > 0,
    deletedItems: params.deletedItems.map(item => ({
      raw: item,
      encoded: encodeFilePath(item)
    })),
    hasPassed: params.passedItems.length > 0,
    passedItems: params.passedItems.map(item => ({
      raw: item,
      encoded: encodeFilePath(item)
    })),
    hasFailed: params.failedItems.length > 0,
    failedItems: params.failedItems.map(item => ({
      raw: item,
      encoded: encodeFilePath(item)
    })),
    actualDir: params.fromJSON ? params.actualDir : `${params.urlPrefix}${_path.default.relative(_path.default.dirname(params.report), params.actualDir)}`,
    expectedDir: params.fromJSON ? params.expectedDir : `${params.urlPrefix}${_path.default.relative(_path.default.dirname(params.report), params.expectedDir)}`,
    diffDir: params.fromJSON ? params.diffDir : `${params.urlPrefix}${_path.default.relative(_path.default.dirname(params.report), params.diffDir)}`,
    ximgdiffConfig: {
      enabled: params.enableClientAdditionalDetection,
      workerUrl: `${params.urlPrefix}worker.js`
    }
  };
  var faviconType = json.hasFailed || json.hasNew || json.hasDeleted ? 'failure' : 'success';
  var view = {
    js,
    css,
    report: JSON.stringify(json),
    faviconData: loadFaviconAsDataURL(faviconType)
  };
  return _mustache.default.render(template.toString(), view);
};
var createJunitReport = params => {
  var failedTests = params.failedItems.length + params.newItems.length + params.deletedItems.length;
  var numberOfTests = failedTests + params.passedItems.length;
  var doc = xmlBuilder.create({
    version: '1.0'
  });
  var testsuitesElement = doc.ele('testsuites', {
    name: 'reg-cli tests',
    tests: numberOfTests,
    failures: failedTests
  });
  var testsuiteElement = testsuitesElement.ele('testsuite', {
    name: 'reg-cli',
    tests: numberOfTests,
    failures: failedTests
  });
  params.failedItems.forEach(item => {
    addFailedJunitTestElement(testsuiteElement, item, 'failed');
  });
  params.newItems.forEach(item => {
    if (params.extendedErrors) {
      addFailedJunitTestElement(testsuiteElement, item, 'newItem');
    } else {
      addPassedJunitTestElement(testsuiteElement, item);
    }
  });
  params.deletedItems.forEach(item => {
    if (params.extendedErrors) {
      addFailedJunitTestElement(testsuiteElement, item, 'deletedItem');
    } else {
      addPassedJunitTestElement(testsuiteElement, item);
    }
  });
  params.passedItems.forEach(item => {
    addPassedJunitTestElement(testsuiteElement, item);
  });
  return doc.end({
    prettyPrint: true
  });
};
function addPassedJunitTestElement(testsuiteElement, item) {
  testsuiteElement.ele('testcase', {
    name: item
  });
}
function addFailedJunitTestElement(testsuiteElement, item, reason) {
  testsuiteElement.ele('testcase', {
    name: item
  }).ele('failure', {
    message: reason
  });
}
function createXimdiffWorker(params) {
  var file = _path.default.join(__dirname, '../template/worker_pre.js');
  var moduleJs = _fs.default.readFileSync(_path.default.join(__dirname, '../report/ui/dist/worker.js'), 'utf8');
  var wasmLoaderJs = _fs.default.readFileSync(detectDiff.getBrowserJsPath(), 'utf8');
  var template = _fs.default.readFileSync(file);
  var ximgdiffWasmUrl = `${params.urlPrefix}detector.wasm`;
  return _mustache.default.render(template.toString(), {
    ximgdiffWasmUrl
  }) + '\n' + moduleJs + '\n' + wasmLoaderJs;
}
var _default = params => {
  if (!!params.report) {
    var html = createHTMLReport(params);
    _makeDir.default.sync(_path.default.dirname(params.report));
    _fs.default.writeFileSync(params.report, html);
    if (!!params.enableClientAdditionalDetection) {
      var workerjs = createXimdiffWorker(params);
      _fs.default.writeFileSync(_path.default.resolve(_path.default.dirname(params.report), 'worker.js'), workerjs);
      var wasmBuf = _fs.default.readFileSync(detectDiff.getBrowserWasmPath());
      _fs.default.writeFileSync(_path.default.resolve(_path.default.dirname(params.report), 'detector.wasm'), wasmBuf);
    }
  }
  if (!!params.junitReport) {
    var junitXml = createJunitReport(params);
    _makeDir.default.sync(_path.default.dirname(params.junitReport));
    _fs.default.writeFileSync(params.junitReport, junitXml);
  }
  var json = createJSONReport(params);
  if (!params.fromJSON) {
    _makeDir.default.sync(_path.default.dirname(params.json));
    _fs.default.writeFileSync(params.json, JSON.stringify(json));
  }
  return json;
};
exports.default = _default;