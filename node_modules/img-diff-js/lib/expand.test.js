"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const node_path_1 = __importDefault(require("node:path"));
const node_fs_1 = __importDefault(require("node:fs"));
const rimraf = __importStar(require("rimraf"));
const pngjs_1 = require("pngjs");
const decode_png_1 = __importDefault(require("./decode-png"));
const expand_1 = __importDefault(require("./expand"));
test("not expand from same dimension images", () => __awaiter(void 0, void 0, void 0, function* () {
    const img1 = yield (0, decode_png_1.default)(node_path_1.default.resolve(__dirname, "../test-images/actual.png"));
    const img2 = yield (0, decode_png_1.default)(node_path_1.default.resolve(__dirname, "../test-images/expected.png"));
    const { width, height, dataList } = (0, expand_1.default)(img1, img2);
    expect(width).toBe(img1.width);
    expect(height).toBe(img1.height);
    expect(width).toBe(img2.width);
    expect(height).toBe(img2.height);
    expect(dataList[0]).toBe(img1.data);
    expect(dataList[1]).toBe(img2.data);
}));
test("expand horizontal", () => __awaiter(void 0, void 0, void 0, function* () {
    rimraf.sync(node_path_1.default.resolve(__dirname, "images/expand_horizontal_generated.png"));
    const img1 = yield (0, decode_png_1.default)(node_path_1.default.resolve(__dirname, "../test-images/actual.png"));
    const img2 = yield (0, decode_png_1.default)(node_path_1.default.resolve(__dirname, "../test-images/actual_wide.png"));
    const { width, height, dataList } = (0, expand_1.default)(img1, img2);
    expect(width).toBe(img2.width);
    expect(height).toBe(img2.height);
    expect(dataList[1]).toBe(img2.data);
    expect(dataList[0].length).toBe(width * height * 4);
    const png = new pngjs_1.PNG({ width, height });
    png.data = Buffer.from(dataList[0]);
    node_fs_1.default.writeFileSync(node_path_1.default.resolve(__dirname, "../test-images/expand_horizontal_generated.png"), pngjs_1.PNG.sync.write(png));
}));
test("expand vertical", () => __awaiter(void 0, void 0, void 0, function* () {
    rimraf.sync(node_path_1.default.resolve(__dirname, "images/expand_vertical_generated.png"));
    const img1 = yield (0, decode_png_1.default)(node_path_1.default.resolve(__dirname, "../test-images/actual.png"));
    const img2 = yield (0, decode_png_1.default)(node_path_1.default.resolve(__dirname, "../test-images/actual_bulk.png"));
    const { width, height, dataList } = (0, expand_1.default)(img1, img2);
    expect(width).toBe(img2.width);
    expect(height).toBe(img2.height);
    expect(dataList[1]).toBe(img2.data);
    expect(dataList[0].length).toBe(width * height * 4);
    const png = new pngjs_1.PNG({ width, height });
    png.data = Buffer.from(dataList[0]);
    node_fs_1.default.writeFileSync(node_path_1.default.resolve(__dirname, "../test-images/expand_vertical_generated.png"), pngjs_1.PNG.sync.write(png));
}));
//# sourceMappingURL=expand.test.js.map